{"html":"\n<style>\n.fit-text {\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  word-break: break-word;\n}\n\n.draggable-item:active {\n  cursor: grabbing !important;\n}\n</style>\n<div class=\"design-container relative w-full h-full\" style=\"background-color: #FFFFFF;\">\n\n\t\t\t\t<div \n\t\t\t\t\tid=\"item-45939105\" \n\t\t\t\t\tclass=\"draggable-item\" \n\t\t\t\t\tdata-x=\"150\" \n\t\t\t\t\tdata-y=\"300\" \n\t\t\t\t\tstyle=\"position: absolute; left: 150px; top: 300px; width: 400px; height: 400px; z-index: 1; transform: rotate(0deg); opacity: 1; cursor: grab; user-select: none; touch-action: none;\"\n\t\t\t\t>\n\t\t\t\t\t<div style=\"background-color: #FF0000; border: 0px solid #000000; width: 100%; height: 100%;\"></div>\n\t\t\t\t</div>\n</div>\n\n<script>\n  (function() {\n    // Function to update the design JSON in the store with new positions\n    function updateDesignJsonInStore() {\n      // Only proceed if we have access to the htmlStore\n      if (typeof window.__html_store === 'undefined') {\n        console.warn('htmlStore not accessible for position updates');\n        return;\n      }\n      \n      try {\n        // Get the current design JSON from the store\n        let designJson = window.__html_store.design_json;\n        if (typeof designJson === 'string') {\n          designJson = JSON.parse(designJson);\n        }\n        \n        // Make sure we have a valid design JSON object\n        if (!designJson || !designJson.items || !Array.isArray(designJson.items)) {\n          console.warn('Invalid design JSON structure in store');\n          return;\n        }\n        \n        // Update each item's position in the design JSON\n        draggableItems.forEach((item) => {\n          const elementId = item.id;\n          const x = parseInt(item.style.left);\n          const y = parseInt(item.style.top);\n          \n          // Find the corresponding item in the design JSON by matching position\n          // This is an approximation since we don't have perfect mapping\n          const index = designJson.items.findIndex(designItem => \n            (Math.abs(designItem.x - x) < 5 && Math.abs(designItem.y - y) < 5) || \n            (Math.abs(parseInt(item.dataset.x) - designItem.x) < 5 && Math.abs(parseInt(item.dataset.y) - designItem.y) < 5)\n          );\n          \n          if (index !== -1) {\n            // Update the position in the design JSON\n            designJson.items[index].x = x;\n            designJson.items[index].y = y;\n          }\n        });\n        \n        // Update the store with the modified design JSON\n        window.__html_store.design_json = JSON.stringify(designJson);\n        console.log('Updated design JSON with new positions');\n      } catch (error) {\n        console.error('Error updating design JSON:', error);\n      }\n    }\n    \n    // Expose a method to access htmlStore from Svelte components\n    window.setHtmlStore = function(store) {\n      window.__html_store = store;\n    };\n    \n    // Initialize drag functionality on page load or when content is injected\n    function initDraggable() {\n      console.log('Initializing draggable items');\n      // Get all draggable elements\n      const draggableItems = document.querySelectorAll('.draggable-item');\n      \n      if (draggableItems.length === 0) {\n        console.warn('No draggable items found!');\n        // Try again after a short delay\n        setTimeout(initDraggable, 100);\n        return;\n      }\n      \n      console.log('Found ' + draggableItems.length + ' draggable items');\n      \n      // Add drag functionality to each element\n      draggableItems.forEach(item => {\n        let isDragging = false;\n        let startX, startY;\n        let originalX, originalY;\n        \n        // Remove existing event listeners to prevent duplicates\n        item.removeEventListener('mousedown', startDrag);\n        item.removeEventListener('touchstart', startDrag);\n        \n        // Add new event listeners\n        item.addEventListener('mousedown', startDrag);\n        item.addEventListener('touchstart', startDrag, { passive: false });\n        \n        function startDrag(e) {\n          console.log('Drag started', e.type);\n          isDragging = true;\n          \n          // Handle both mouse and touch events\n          if (e.type === 'mousedown') {\n            startX = e.clientX;\n            startY = e.clientY;\n            // Add mouse-specific event listeners\n            document.addEventListener('mousemove', onDrag);\n            document.addEventListener('mouseup', stopDrag);\n          } else if (e.type === 'touchstart') {\n            startX = e.touches[0].clientX;\n            startY = e.touches[0].clientY;\n            // Add touch-specific event listeners\n            document.addEventListener('touchmove', onDrag, { passive: false });\n            document.addEventListener('touchend', stopDrag);\n          }\n          \n          // Get original position\n          originalX = parseInt(item.style.left);\n          originalY = parseInt(item.style.top);\n          \n          // Update data attributes\n          item.dataset.x = originalX;\n          item.dataset.y = originalY;\n          \n          // Prevent default behavior\n          e.preventDefault();\n        }\n        \n        function onDrag(e) {\n          if (!isDragging) return;\n          \n          let currentX, currentY;\n          \n          // Handle both mouse and touch events\n          if (e.type === 'mousemove') {\n            currentX = e.clientX;\n            currentY = e.clientY;\n          } else if (e.type === 'touchmove') {\n            currentX = e.touches[0].clientX;\n            currentY = e.touches[0].clientY;\n          }\n          \n          // Calculate the new position\n          const dx = currentX - startX;\n          const dy = currentY - startY;\n          \n          const newX = originalX + dx;\n          const newY = originalY + dy;\n          \n          // Update element position\n          item.style.left = newX + 'px';\n          item.style.top = newY + 'px';\n          \n          // Update data attributes\n          item.dataset.x = newX;\n          item.dataset.y = newY;\n          \n          // Prevent default behavior for touch\n          if (e.type === 'touchmove') {\n            e.preventDefault();\n          }\n        }\n        \n        function stopDrag(e) {\n          if (!isDragging) return;\n          \n          console.log('Drag ended');\n          isDragging = false;\n          \n          // Remove event listeners\n          if (e.type === 'mouseup') {\n            document.removeEventListener('mousemove', onDrag);\n            document.removeEventListener('mouseup', stopDrag);\n          } else if (e.type === 'touchend') {\n            document.removeEventListener('touchmove', onDrag);\n            document.removeEventListener('touchend', stopDrag);\n          }\n          \n          // Update the store with the new positions\n          updateDesignJsonInStore();\n        }\n      });\n    }\n    \n    // Run the initialization \n    setTimeout(initDraggable, 100);\n    \n    // Store reference to draggable items for use in updateDesignJsonInStore\n    const draggableItems = document.querySelectorAll('.draggable-item');\n  })();\n</script>","design_concept":null,"design_json_raw":{"concept":"Simple red square design","background":"#FFFFFF","artboard":{"width":700,"height":1000},"items":[{"item":{"fill":"#FF0000","stroke":"#000000","strokeWidth":0},"x":150,"y":300,"width":400,"height":400,"rotation":0,"zIndex":1,"opacity":100}]},"design_json_processed":{"concept":"Simple red square design","background":"#FFFFFF","artboard":{"width":700,"height":1000},"items":[{"item":{"fill":"#FF0000","stroke":"#000000","strokeWidth":0},"x":150,"y":300,"width":400,"height":400,"rotation":0,"zIndex":1,"opacity":100}]}}